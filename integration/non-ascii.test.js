import { withGitIntegration } from './utils/gitIntegration'
import * as fileFixtures from './fixtures/files'
import * as configFixtures from './fixtures/configs'

jest.unmock('execa')
jest.setTimeout(20000)
jest.retryTimes(2)

describe('integration', () => {
  const getQuotePathTest = (state) =>
    withGitIntegration(async ({ execGit, gitCommit, readFile, writeFile }) => {
      // Run lint-staged with `prettier --write` and commit pretty files
      await writeFile('.lintstagedrc.json', JSON.stringify(configFixtures.prettierWrite))

      await execGit(['config', 'core.quotepath', state])

      // Stage multiple ugly files
      await writeFile('Ð¿Ñ€Ð¸Ð²ÐµÑ‚.js', fileFixtures.uglyJS)
      await execGit(['add', 'Ð¿Ñ€Ð¸Ð²ÐµÑ‚.js'])

      await writeFile('ä½ å¥½.js', fileFixtures.uglyJS)
      await execGit(['add', 'ä½ å¥½.js'])

      await writeFile('ðŸ‘‹.js', fileFixtures.uglyJS)
      await execGit(['add', 'ðŸ‘‹.js'])

      await gitCommit()

      // Nothing is wrong, so a new commit is created and files are pretty
      expect(await execGit(['rev-list', '--count', 'HEAD'])).toEqual('2')
      expect(await execGit(['log', '-1', '--pretty=%B'])).toMatch('test')
      expect(await readFile('Ð¿Ñ€Ð¸Ð²ÐµÑ‚.js')).toEqual(fileFixtures.prettyJS)
      expect(await readFile('ä½ å¥½.js')).toEqual(fileFixtures.prettyJS)
      expect(await readFile('ðŸ‘‹.js')).toEqual(fileFixtures.prettyJS)
    })

  test('handles files with non-ascii characters when core.quotepath is on', getQuotePathTest('on'))

  test(
    'handles files with non-ascii characters when core.quotepath is off',
    getQuotePathTest('off')
  )
})
